{
    "analysis_tasks": [
		{
            "task": "SimpleGlobalAlignment",
            "module": "merlin.analysis.globalalign"
        },
        {
            "task": "FiducialCorrelationWarp",
            "module": "merlin.analysis.warp",
            "parameters": {
                "highpass_sigma": 10,
                "write_fiducial_images": false
            }
        },
	{
            "task": "GenerateMosaic",
            "module": "merlin.analysis.generatemosaic",
            "analysis_name": "mosaic_DAPI",
            "parameters": {
                "global_align_task": "SimpleGlobalAlignment",
                "warp_task": "FiducialCorrelationWarp",
                "data_channels": "DAPI",
                "z_index": "maximum_projection",
                "draw_fov_labels": false,
		"microns_per_pixel": 1
            }
        },
        {
            "task": "GenerateMosaic",
            "module": "merlin.analysis.generatemosaic",
            "analysis_name": "mosaic_DAPI_FOVs",
            "parameters": {
                "global_align_task": "SimpleGlobalAlignment",
                "warp_task": "FiducialCorrelationWarp",
                "data_channels": "DAPI",
                "z_index": "maximum_projection",
                "draw_fov_labels": true,
		"microns_per_pixel": 1
            }
        },
        {
            "task": "DeconvolutionPreprocess",
            "module": "merlin.analysis.preprocess",
            "parameters": {
                "warp_task": "FiducialCorrelationWarp",
                "highpass_sigma": 2,
                "save_pixel_histogram": false,
				"decon_sigma": 2,
                "decon_iterations": 10,
                "decon_filter_size": 9
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize1",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.55,
                "low_pass_sigma" : 1.4,
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize2",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.55,
                "low_pass_sigma" : 1.4,
                "previous_iteration": "Optimize1",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize3",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.55,
                "low_pass_sigma" : 1.4,
                "previous_iteration": "Optimize2",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize4",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.55,
                "low_pass_sigma" : 1.4,
				"previous_iteration": "Optimize3",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize5",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.55,
                "low_pass_sigma" : 1.4,
				"previous_iteration": "Optimize4",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize6",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.55,
                "low_pass_sigma" : 1.4,
				"previous_iteration": "Optimize5",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize7",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.55,
                "low_pass_sigma" : 1.4,
				"previous_iteration": "Optimize6",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize8",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.55,
                "low_pass_sigma" : 1.4,
				"previous_iteration": "Optimize7",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize9",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.55,
                "low_pass_sigma" : 1.4,
				"previous_iteration": "Optimize8",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize10",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.55,
                "low_pass_sigma" : 1.4,
				"previous_iteration": "Optimize9",
                "optimize_chromatic_correction": true
            }
        },
        {
            "task": "Decode",
            "module": "merlin.analysis.decode",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "optimize_task": "Optimize10",
                "global_align_task": "SimpleGlobalAlignment",
				"remove_z_duplicated_barcodes": false,
				"minimum_area": 2,
                "lowpass_sigma": 1.4,
                "crop_width": 102,
                "distance_threshold":0.65,
                "write_decoded_images": true
            }
		},
		{
            "task": "GenerateAdaptiveThreshold",
            "module": "merlin.analysis.filterbarcodes",
            "parameters": {
                "decode_task": "Decode",
                "run_after_task": "Decode"
            }
        },
        {
            "task": "AdaptiveFilterBarcodes",
            "module": "merlin.analysis.filterbarcodes",
            "parameters": {
                "misidentification_rate": 0.05,
                "decode_task": "Decode",
                "adaptive_task": "GenerateAdaptiveThreshold"
            }
        },
        {
            "task": "ExportBarcodes",
            "module": "merlin.analysis.exportbarcodes",
            "parameters": {
				"filter_task": "AdaptiveFilterBarcodes",
                "columns": ["barcode_id", "global_x", "global_y", "global_z",
                    "x", "y", "fov", "cell_index", "area", "mean_intensity",
		    		"max_intensity", "mean_distance", "min_distance"],
                	"exclude_blanks": false
	    		}
        }
    ]
}
